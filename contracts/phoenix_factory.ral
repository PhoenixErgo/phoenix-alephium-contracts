import "std/fungible_token_interface"

Contract PhoenixFactory(
    mut phoenixBankTemplateId: ByteVec,
    mut selfOwner: Address,
    mut fee: U256,
    mut active: Bool,
    mut maxDecimals: U256,
    mut maxBankFeeNum: U256,
    mut maxCreatorFeeNum: U256,
    mut minValueDivisor: U256,
    mut contractCreationALPH: U256
) extends PhoenixFactoryConstants(), Owned(selfOwner) {

    @using(updateFields = true, checkExternalCaller = true)
    pub fn setPhoenixBankTemplateId(newTemplateId: ByteVec) -> () {
        assertOwner(callerAddress!())
        phoenixBankTemplateId = newTemplateId
    }

    pub fn getPhoenixBankTemplateId() -> ByteVec {
        return phoenixBankTemplateId
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn setFee(newFee: U256) -> () {
        assertOwner(callerAddress!())
        fee = newFee
    }

    pub fn getFee() -> U256 {
        return fee
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn setActive(isActive: Bool) -> () {
        assertOwner(callerAddress!())
        active = isActive
    }

    pub fn getActive() -> Bool {
        return active
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn setMaxDecimals(newMaxDecimals: U256) -> () {
        assertOwner(callerAddress!())
        maxDecimals = newMaxDecimals
    }

    pub fn getMaxDecimals() -> (U256) {
        return maxDecimals
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn setMaxBankFeeNum(newMaxBankFeeNum: U256) -> () {
        assertOwner(callerAddress!())
        maxBankFeeNum = newMaxBankFeeNum
    }

    pub fn getMaxBankFeeNum() -> U256 {
        return maxBankFeeNum
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn setMaxCreatorFeeNum(newMaxCreatorFeeNum: U256) -> () {
        assertOwner(callerAddress!())
        maxCreatorFeeNum = newMaxCreatorFeeNum
    }

    pub fn getMaxCreatorFeeNum() -> U256 {
        return maxCreatorFeeNum
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn setMinValueDivisor(newMinValueDivisor: U256) -> () {
        assertOwner(callerAddress!())
        minValueDivisor = newMinValueDivisor
    }

    pub fn getMinValueDivisor() -> U256 {
        return minValueDivisor
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn setContractCreationALPH(newContractCreationALPH: U256) -> () {
        assertOwner(callerAddress!())
        contractCreationALPH = newContractCreationALPH
    }

    pub fn getContractCreationALPH() -> U256 {
        return contractCreationALPH
    }

    @using(preapprovedAssets = true, assetsInContract = false, updateFields = false, checkExternalCaller = false)
    pub fn createContract(baseTokenId: ByteVec, symbol: ByteVec, name: ByteVec, totalSupply: U256, bankFeeNum: U256, creatorFeeNum: U256) -> () {
        
        assert!(active, ErrorCodes.NotActive)

        let caller = callerAddress!()
        let baseTokenDecimals = if(baseTokenId == ALPH) 18 else IFungibleToken(baseTokenId).getDecimals()

        assert!(baseTokenDecimals <= maxDecimals, ErrorCodes.MaxDecimalsExceeded)
        assert!(bankFeeNum >= 10, ErrorCodes.MinNotMet)
        assert!(bankFeeNum <= maxBankFeeNum, ErrorCodes.MaxBankFeeNumExceeded)
        assert!(creatorFeeNum <= maxCreatorFeeNum, ErrorCodes.MaxCreatorFeeNumExceeded)

        let oneUnit = (10 ** baseTokenDecimals) / minValueDivisor // allows this to be changed in the future. For BTC its unreasonable to have a minimum of 1 BTC

        let (encodedImmFields, encodedMutFields) = PhoenixBank.encodeFields!(
            caller, // creatorAddress
            baseTokenId,
            symbol,
            name,
            bankFeeNum,
            creatorFeeNum,
            baseTokenDecimals,
            totalSupply,
            oneUnit, // min value should be one whole unit
            oneUnit, // balance starts as one whole unit
            totalSupply - oneUnit // one unit removed to avoid divide by zero 
        )

        if(baseTokenId == ALPH){
            let hodlALPHContractId = copyCreateContractWithToken!{caller -> ALPH: contractCreationALPH + oneUnit}(
                phoenixBankTemplateId,
                encodedImmFields,
                encodedMutFields,
                totalSupply - oneUnit // one unit removed to avoid divide by zero, one unit could also be burned instead of not being minted
            )
            transferToken!(caller, selfOwner, ALPH, fee)
            emit Creation(caller, hodlALPHContractId, ALPH, bankFeeNum)
        } else {
            let hodlTokenContractId = copyCreateContractWithToken!{caller -> ALPH: contractCreationALPH, baseTokenId: oneUnit}(
                phoenixBankTemplateId,
                encodedImmFields,
                encodedMutFields,
                totalSupply - oneUnit // one unit removed to avoid divide by zero, one unit could also be burned instead of not being minted
            )
            transferToken!(caller, selfOwner, ALPH, fee)
            emit Creation(caller, hodlTokenContractId, baseTokenId, bankFeeNum)
        }
    }
}