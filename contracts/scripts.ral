TxScript PhoenixMint(bank: PhoenixBank, baseTokenId: ByteVec, amountHodlTokenDesired: U256, baseTokenApprovalAmount: U256, interfaceFee: U256) {
    if(interfaceFee > 0){
        let recipient = @1BroxRnYkkPrmur5LeBTYwbF2WzsKPb1jJLkbJC3LuJwe
        transferToken!{callerAddress!() -> ALPH: interfaceFee}(callerAddress!(), recipient, ALPH, interfaceFee)
    }
    bank.mint{callerAddress!() -> baseTokenId: baseTokenApprovalAmount}(amountHodlTokenDesired)
}

TxScript PhoenixBurn(bank: PhoenixBank, amountHodlTokenToBurn: U256, interfaceFee: U256) {
    if(interfaceFee > 0){
        let recipient = @1BroxRnYkkPrmur5LeBTYwbF2WzsKPb1jJLkbJC3LuJwe
        transferToken!{callerAddress!() -> ALPH: interfaceFee}(callerAddress!(), recipient, ALPH, interfaceFee)
    }
    bank.burn{callerAddress!() -> tokenId!(bank): amountHodlTokenToBurn; callerAddress!() -> ALPH: dustAmount!() + dustAmount!() + dustAmount!() + dustAmount!()}(amountHodlTokenToBurn)
}

TxScript PhoenixDeposit(bank: PhoenixBank, baseTokenId: ByteVec, amountBaseTokenToDeposit: U256, interfaceFee: U256) {
    if(interfaceFee > 0){
        let recipient = @1BroxRnYkkPrmur5LeBTYwbF2WzsKPb1jJLkbJC3LuJwe
        transferToken!{callerAddress!() -> ALPH: interfaceFee}(callerAddress!(), recipient, ALPH, interfaceFee)
    }
    bank.deposit{callerAddress!() -> baseTokenId: amountBaseTokenToDeposit}(amountBaseTokenToDeposit)
}

TxScript CreateContract(factory: PhoenixFactory, baseTokenId: ByteVec, symbol: ByteVec, name: ByteVec, totalSupply: U256, bankFeeNum: U256, creatorFeeNum: U256, interfaceFee: U256) {
    if(interfaceFee > 0){
        let recipient = @1BroxRnYkkPrmur5LeBTYwbF2WzsKPb1jJLkbJC3LuJwe
        transferToken!{callerAddress!() -> ALPH: interfaceFee}(callerAddress!(), recipient, ALPH, interfaceFee)
    }
    let fee = factory.getFee()
    if(baseTokenId == ALPH){
        let baseAlphAmount = 2 alph
        factory.createContract{callerAddress!() -> ALPH: baseAlphAmount + fee}(baseTokenId, symbol, name, totalSupply, bankFeeNum, creatorFeeNum)
    } else {
        let baseTokenDecimals = IFungibleToken(baseTokenId).getDecimals()
        let oneUnit = 10 ** baseTokenDecimals
        let alphAmount = 1 alph
        factory.createContract{callerAddress!() -> ALPH: alphAmount + fee, baseTokenId: oneUnit}(baseTokenId, symbol, name, totalSupply, bankFeeNum, creatorFeeNum)
    }
    
}

TxScript Withdraw(token: USDToken, amount: U256) {
    token.withdraw(amount)
}
